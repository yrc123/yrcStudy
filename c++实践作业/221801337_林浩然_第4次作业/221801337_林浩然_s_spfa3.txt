#include<bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define rep(i, a, b) for(int i = (a); i < (b); ++i)
#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)
#define sz(x) (int)x.size()
#define de(a) cout << #a << " = " << a << endl
#define dd(a) cout << #a << " = " << a << " "
#define all(a) a.begin(), a.end()
#define pw(a) (1ll<<(a))
#define endl "\n"
typedef long long ll;
typedef double db;
typedef pair<int, int> pii;
typedef vector<int> vi;
//并查集
//int f[];
//int Find(int x){x==f[x]?return f[x]:f[x]=Find(f[x]);}
//int join(int x,int y){if(Find(x)!=Find(y))f[Find(x)]=Find(y);}
//快速幂
int qpow(ll a,ll b,ll m){ll c=1;while(b){if(b&1)c=c*a%m;b>>=1;a=a*a%m;}return c;}
struct node{
	int f,t,v;
};
int vis[10005],w[10005],cnt=0,sum=0;
vector<node>que[10005];
deque<int>bfs;
int main(){
	ios::sync_with_stdio(false);
	int n,m,s,f,sum=0;
	node tp;
	cin>>n>>m>>s;
	rep(i,1,n+1)w[i]=2147483647;
	rep(i,0,m){
		cin>>tp.f>>tp.t>>tp.v;
		que[tp.f].push_back(tp);
	}
	vis[s]=1;
	w[s]=0;
	bfs.push_front(s);
	cnt++;
	while(!bfs.empty()){
		f=bfs.front();
		while(w[f]*cnt>sum){
			bfs.pop_front();
			bfs.push_back(f);
			f=bfs.front();
		}
		bfs.pop_front();
		vis[f]=1;
		sum-=w[f];
		cnt--;
		rep(i,0,que[f].size()){
			tp=que[f][i];
			if(w[tp.t]>w[tp.f]+tp.v){
				w[tp.t]=w[tp.f]+tp.v;
				if(vis[tp.t]==0){
					vis[tp.t]=1;
					sum+=w[tp.t];
					cnt++;
					if(!bfs.empty()&&w[tp.t]>w[f])bfs.push_back(tp.t);
					else bfs.push_front(tp.t);
				}
			}
		}
		vis[f]=0;
	}
	rep(i,1,n+1)cout<<w[i]<<" ";
}